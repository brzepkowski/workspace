import java.util.*;

import java.io.*;
import java.math.*;

class Player {
	
	static int laps;
	static int checkpointCount;
	
	static int[][] checkpoints;
	static int[][] myPods;
	static int[][] opponentsPods;
	
	static double[][] vectors;
	static double[][] slopes;
	
	public static void generateSlopes(double A1, double B1, double C1, double A2, double B2, double C2) {
		slopes = new double[2][2];
		
		double a1 = ((Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * A2) - (Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * A1)) / 
((Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * B1) - (Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * B2));
		
		double b1 = ((Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * C2) - (Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * C1)) / 
				((Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * B1) - (Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * B2));
		
		slopes[0][0] = a1;
		slopes[0][1] = b1;
		
		double a2 = (-(Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * A2) - (Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * A1)) / 
((Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * B1) + (Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * B2));
		
		double b2 = (-(Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * C2) - (Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * C1)) / 
				((Math.sqrt(Math.pow(A2, 2) + Math.pow(B2, 2)) * B1) + (Math.sqrt(Math.pow(A1, 2) + Math.pow(B1, 2)) * B2));
		
		slopes[1][0] = a2;
		slopes[1][1] = b2;
	}
	
	/* Generates vectors for three points
	 * i - index of Pod, for which right now are generated vectors
	 */
	public static void generateVectors(int i) {
		
		// Generate vector for the start-point (point in which right now is Pod)
		if (myPods[i][2] == 0 && myPods[i][3] == 0) { // If Pod isn't moving
			// Generate vector by dividing vx and vy by 2
			vectors[0][0] = (myPods[i][0] - checkpoints[myPods[i][5]][0]) / 2; // myPods[i][5] = nextCheckpointId
			vectors[0][1] = (myPods[i][0] - checkpoints[myPods[i][5]][1]) / 2;
		}
		else {
			vectors[0][0] = myPods[i][2]; // vx
			vectors[0][1] = myPods[i][3]; // vy
		}
		
		// Generate vector for the second point
		int x0 = myPods[i][0];
		int y0 = myPods[i][1];
		
		int x1 = checkpoints[myPods[i][5]][0];
		int y1 = checkpoints[myPods[i][5]][1];
		
		int x2 = checkpoints[myPods[i][5] + 1][0];
		int y2 = checkpoints[myPods[i][5] + 1][1];
		
		double a1 = (double)(y0 - y1) / (x0 - x1);
		double a2 = (double)(y1 - y2) / (x1 - x2);
		double b1 = (double)(y1 - (a1 * x1));
		double b2 = (double)(y2 - (a2 * x2));
		
		System.out.println(a1 + " - " + a2);
		
		generateSlopes(1.0, a1, b1, 1.0, a2, b2);
		System.out.println("a1 = " + slopes[0][0] + ", b1 = " + slopes[0][1]);
		System.out.println("a2 = " + slopes[1][0] + ", b2 = " + slopes[1][1]);
		
		double radians = Math.atan((a1 - a2) / (1 + (a1 * a2)));
		radians = radians / 2; // Half of the angle between lines
		
		
		
	/*	
		// First point is left-down from the second or in the same line
		if (x0 < x1 && y0 < y1) {
			// Third point left-down
			if (x2 < x1 && y2 < y1) {
				// Third point left-down-up
				if (y2 > y0) {
					
				}
				// Third point left-down-down
				if (y2 < y0) {
					
				}
			}
			// Third point right-down
			if (x2 > x1 && y2 < y1) {
				
			}
			// Third point right-up
			if (x2 > x1 && y2 > y1) {
				
			}
			// Third point left-up
			if (x2 < x1 && y2 > y1) {
				
			}
		}*/
		//radians += Math.atan(a1);
		
		//radians -= Math.PI / 2;
		
		double aOrthogonal = Math.tan(radians);
		
		double d1 = Math.sqrt(Math.pow(checkpoints[myPods[i][5]][0] - checkpoints[myPods[i][5]+1][0], 2) + 
				Math.pow(checkpoints[myPods[i][5]][1] - checkpoints[myPods[i][5]+1][1], 2));
		
		
		//System.out.println(Math.toDegrees(radians));
		//System.out.println(d1);
		
	}
	

    public static void main(String args[]) {
    	
    	vectors = new double[3][2];
    	myPods = new int[2][6];
    	
    	String input = "10 3 0 0 5 5 10 5 ";
        //Scanner in = new Scanner(System.in);
        Scanner in = new Scanner(input);
    	laps = in.nextInt();
        checkpointCount = in.nextInt();
        checkpoints = new int[checkpointCount][2];
        
        for (int i = 0; i < checkpointCount; i++) {
            checkpoints[i][0] = in.nextInt();
            checkpoints[i][1] = in.nextInt();
        }
        
       /* 
     // Location of the CENTROID
        int x = 0;
        int y = 0;
        for (int i = 0 ; i < checkpointCount; i++) {
        	x += checkpoints[i][0];
        	y += checkpoints[i][1];
        }
        x = x / checkpointCount;
        y = y / checkpointCount;
        
        // Calculating new checkpoints locations
        for (int i = 0 ; i < checkpointCount; i++) {            	
        	// Right-down 
        	if (checkpoints[i][0] - x < 0 && checkpoints[i][1] - y < 0) {
        		 int xDistance = Math.abs(x - checkpoints[i][0]);
        		 int yDistance = Math.abs(y - checkpoints[i][1]);
        		 double distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
        		 double cosAlfa = xDistance / distance;
        		 
        		 int x_ = (int) (cosAlfa * 600);
        		 int y_ = (int) Math.sqrt(360000 - Math.pow(x_, 2));
        		 
        		 checkpoints[i][0] = checkpoints[i][0] + x_;
        		 checkpoints[i][1] = checkpoints[i][1] + y_;
        	}
        	// Left-down 
        	else if (checkpoints[i][0] - x > 0 && checkpoints[i][1] - y < 0) {
       		 	int xDistance = Math.abs(x - checkpoints[i][0]);
       		 	int yDistance = Math.abs(y - checkpoints[i][1]);
       		 	double distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
       		 	double cosAlfa = xDistance / distance;
       		 
       		 	int x_ = (int) (cosAlfa * 600);
       		 	int y_ = (int) Math.sqrt(360000 - Math.pow(x_, 2));
       		 
       		 	checkpoints[i][0] = checkpoints[i][0] - x_;
       		 	checkpoints[i][1] = checkpoints[i][1] + y_;
       	 	}
        	// Right-up
        	else if (checkpoints[i][0] - x < 0 && checkpoints[i][1] - y > 0) {
       		 	int xDistance = Math.abs(x - checkpoints[i][0]);
       		 	int yDistance = Math.abs(y - checkpoints[i][1]);
       		 	double distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
       		 	double cosAlfa = xDistance / distance;
       		 
       		 	int x_ = (int) (cosAlfa * 600);
       		 	int y_ = (int) Math.sqrt(360000 - Math.pow(x_, 2));
       		 
       		 	checkpoints[i][0] = checkpoints[i][0] + x_;
       		 	checkpoints[i][1] = checkpoints[i][1] - y_;
       	 	}
        	// Left-up
        	else if (checkpoints[i][0] - x > 0 && checkpoints[i][1] - y > 0) {
       		 	int xDistance = Math.abs(x - checkpoints[i][0]);
       		 	int yDistance = Math.abs(y - checkpoints[i][1]);
       		 	double distance = Math.sqrt(Math.pow(xDistance, 2) + Math.pow(yDistance, 2));
       		 	double cosAlfa = xDistance / distance;
       		 
       		 	int x_ = (int) (cosAlfa * 600);
       		 	int y_ = (int) Math.sqrt(360000 - Math.pow(x_, 2));
       		 
       		 	checkpoints[i][0] = checkpoints[i][0] - x_;
       		 	checkpoints[i][1] = checkpoints[i][1] - y_;
       	 	}
        	// On the same line
        	else if (checkpoints[i][0] - x == 0 || checkpoints[i][1] - y == 0) {
          		 //TO_DO!!!
       	 	}
        }
*/
        myPods[0][0] = 0;
        myPods[0][1] = 0;
        myPods[0][2] = 0;
        myPods[0][3] = 0;
        myPods[0][4] = 0;
        myPods[0][5] = 1;
        generateVectors(0);
        
        
      /*  // game loop
        while (true) {
        	int [][] myPods = new int[2][6];
        	int [][] opponentsPods = new int [2][6];
        	// My pods
            for (int i = 0; i < 2; i++) {
            	myPods[i][0] = in.nextInt(); // x
            	myPods[i][1] = in.nextInt(); // y
            	myPods[i][2] = in.nextInt(); // vx
            	myPods[i][3] = in.nextInt(); // vy
            	myPods[i][4] = in.nextInt(); // angle
            	myPods[i][5] = in.nextInt(); // nextCheckpointId
            }
            // Opponents pods
            for (int i = 0; i < 2; i++) {
            	opponentsPods[i][0] = in.nextInt(); // x
            	opponentsPods[i][1] = in.nextInt(); // y
            	opponentsPods[i][2] = in.nextInt(); // vx
            	opponentsPods[i][3] = in.nextInt(); // vy
            	opponentsPods[i][4] = in.nextInt(); // angle
            	opponentsPods[i][5] = in.nextInt(); // nextCheckpointId
            }
            
            int x1 = checkpoints[myPods[0][5]][0];
            int y1 = checkpoints[myPods[0][5]][1];
            
            int x2 = checkpoints[myPods[1][5]][0];
            int y2 = checkpoints[myPods[1][5]][1];
            
            System.out.println(x1 + " " + y1 + " 200");
            System.out.println(x2 + " " + y2 + " 200");

            // To debug: System.err.println("Debug messages...");
        }*/        
    }
}