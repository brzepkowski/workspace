import java.util.Random;


public class Table {
	
	SocketServer server = null;
	
	public int dealer;
	public int bigBlind;
	public int smallBlind;
	
	
	public int tourNumber = 1;
	public int auctionRoundNumber = 0;
	//public int cardsRoundNumber = 0;
	
	public int notifiedAuctionPlayers = 0;
	public int notifiedCardPlayers = 0;
	
	
	Cards cards;
	
	public int auctionRoundsLeft;
	public int whichRound = 0; // <-- This takes value 0 for round of changing cars and 1 for auction 
	
	public Table(SocketServer s) {
		this.server = s;
		System.out.println("Wszyscy gracze podłączeni, gra rozpoczęta!");
		//server.broadcast("UnlockButtons-0-0-0-0-0");
		
		//Drawing Dealer, Small Blind and Big Blind and broadcasting information about it
		dealer = drawDealer(1, server.numberOfPlayers);
		if (server.numberOfPlayers == 2) {
			dealer = drawDealer(1, 2);
			if (dealer + 1 > 2) {
				smallBlind = 1;
			}
			else smallBlind = 2;
			String message = "Status-" + dealer + "-" + smallBlind + "-0-0-0";
		}
		else {
			if (dealer + 1 > server.numberOfPlayers) {
				smallBlind = 1;
			}
			else {
				smallBlind = dealer + 1;
			}
			if (server.numberOfPlayers > 2) {
				if (smallBlind + 1 > server.numberOfPlayers) {
					bigBlind = 1;
				}
				else {
					bigBlind = smallBlind + 1;
				}
			}
			else {
				bigBlind = 0;
			}
			String message = "Status-" + dealer + "-" + smallBlind + "-" + bigBlind + "-0-0";
			server.broadcast(message);
			server.broadcast("Auction-smallBlind-sb-0-0-0");
			server.broadcast("Auction-bigBlind-bb-0-0-0");
		}
		// Creating object of Cards, shuffling the deck and giving 4 cards to each player
		cards = new Cards();
		
		cards.shuffleDeck();
		
		for (int i = 1; i <= server.numberOfPlayers; i++) {
		
			String[] basicCards = cards.getCards(4);
			String bCards = "BasicCards-" + i + "-" + basicCards[0] + "-" + basicCards[1] + "-" + basicCards[2] + "-" + basicCards[3];
			server.broadcast(bCards);
		}
		// Musi byc dodane, ze small i big Blind stawiaja stawki podane jako parametr przy uruchomieniu serwera
		//!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
		
		
		//The game must be begun by first player on the left from Big Blind
		if (server.limitOfPlayers > 2) {
			if (bigBlind == server.limitOfPlayers) {
				server.broadcast("UnlockAuctionButtons-1-0-0-0-0");
			}
			else {
				server.broadcast("UnlockAuctionButtons-" + (bigBlind + 1) + "-0-0-0-0");
			}
		}
		// When there are only 2 players in the game, dealer begins the auction
		else {
			server.broadcast("UnlockAuctionButtons-" + dealer + "-0-0-0-0");
		}
	}
	
	public void interpreter(String message) {
		System.out.println("Interpreter obsłuzy message: ");
		String[] parts = message.split("-");
		String part1 = parts[0];
		String part2 = parts[1];
		String part3 = parts[2];
		String part4 = parts[3];
		String part5 = parts[4];
		String part6 = parts[5];
		
		if (part1.equals("ChangeOfCards")) {
			System.out.println("TABLE--Zamiana: " + part3 + "-" + part4 + "-" + part5 + "-" + part6);
				String cCards = "ChangeOfCards-" + part2 + "-";
				
				
				if (part3.equals("0") == false && part4.equals("0") == false && part5.equals("0") == false && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(4);
					cCards += changedCards[0] + "-" + changedCards[1] + "-" + changedCards[2] + "-" + changedCards[3];
				}
				else if (part3.equals("0") == false && part4.equals("0") == false && part5.equals("0") == false && part6.equals("0")) {
					String[] changedCards = cards.getCards(3);
					cCards += changedCards[0] + "-" + changedCards[1] + "-" + changedCards[2] + "-" + "0";
				}
				else if (part3.equals("0") == false && part4.equals("0") == false && part5.equals("0") && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(3);
					cCards += changedCards[0] + "-" + changedCards[1] + "-0-" + changedCards[2];
				}
				else if (part3.equals("0") == false && part4.equals("0") == false && part5.equals("0") && part6.equals("0")) {
					String[] changedCards = cards.getCards(2);
					cCards += changedCards[0] + "-" + changedCards[1] + "-0-0";
				}
				else if (part3.equals("0") == false && part4.equals("0") && part5.equals("0") == false && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(3);
					cCards += changedCards[0] + "-0-" + changedCards[1] + "-" + changedCards[2];
				}
				else if (part3.equals("0") == false && part4.equals("0") && part5.equals("0") == false && part6.equals("0")) {
					String[] changedCards = cards.getCards(2);
					cCards += changedCards[0] + "-0-" + changedCards[1] + "-0";
				}
				else if (part3.equals("0") == false && part4.equals("0") && part5.equals("0") && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(2);
					cCards += changedCards[0] + "-0-0-" + changedCards[1];
				}
				else if (part3.equals("0") == false && part4.equals("0") && part5.equals("0") && part6.equals("0")) {
					String[] changedCards = cards.getCards(1);
					cCards += changedCards[0] + "-0-0-0";
				}
				else if (part3.equals("0") && part4.equals("0") == false && part5.equals("0") == false && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(3);
					cCards +=  "0-" + changedCards[0] + "-" + changedCards[1] + "-" + changedCards[2];
				}
				else if (part3.equals("0") && part4.equals("0") == false && part5.equals("0") == false && part6.equals("0")) {
					String[] changedCards = cards.getCards(2);
					cCards += "0-" + changedCards[0] + "-" + changedCards[1] + "-0";
				}
				else if (part3.equals("0") && part4.equals("0") == false && part5.equals("0") && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(2);
					cCards += "0-" + changedCards[0] + "-0-" + changedCards[1];
				}
				else if (part3.equals("0") && part4.equals("0") == false && part5.equals("0") && part6.equals("0")) {
					String[] changedCards = cards.getCards(1);
					cCards += "0-" + changedCards[0] + "-0-0";
				}
				else if (part3.equals("0") && part4.equals("0") && part5.equals("0") == false && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(2);
					cCards += "0-0-" + changedCards[0] + "-" + changedCards[1];
				}
				else if (part3.equals("0") && part4.equals("0") && part5.equals("0") == false && part6.equals("0")) {
					String[] changedCards = cards.getCards(1);
					cCards += "0-0-" + changedCards[0] + "-0";
				}
				else if (part3.equals("0") && part4.equals("0") && part5.equals("0") && part6.equals("0") == false) {
					String[] changedCards = cards.getCards(1);
					cCards += "0-0-0-" + changedCards[0];
				}
				else if (part3.equals("0") && part4.equals("0") && part5.equals("0") && part6.equals("0")) {
					cCards += "0-0-0-0";
				}
				
				
				System.out.println("cCards: " + cCards);
				server.broadcast(cCards);
				server.broadcast("BlockCardButtons-" + part2 + "-0-0-0-0");
				notifiedCardPlayers++;
				if (notifiedCardPlayers == server.limitOfPlayers) {
					System.out.println("Zakonczono rundę wymiany kart");
					notifiedCardPlayers = 0;
					server.broadcast("UnlockAuctionButtons-" + smallBlind + "-0-0-0-0");
				}
		
		}
		// Basic method for auctions and above is adding to notifiedCardPlayers
		
		else if (part1.equals("Auction")) {
			notifiedAuctionPlayers++;
			if (notifiedAuctionPlayers != server.limitOfPlayers) {
				server.broadcast("BlockAuctionButtons-" + part2 + "-0-0-0-0");
				int i = Integer.parseInt(part2);
				if (i + 1 > server.limitOfPlayers) {
					server.broadcast("UnlockAuctionButtons-1-0-0-0-0");
					System.out.println("Serwer: UnlockAuctionButtons-1-0-0-0-0");
				}
				else {
					server.broadcast("UnlockAuctionButtons-" + Integer.toString(i + 1) + "-0-0-0-0");
					System.out.println("Serwer: UnlockAuctionButtons-" + Integer.toString(i + 1) + "-0-0-0-0");
				}
			}
			else {
				server.broadcast("BlockAuctionButtons-" + part2 + "-0-0-0-0");
				for (int i = 1; i <= server.limitOfPlayers; i++) {
					server.broadcast("UnlockCardButtons-" + Integer.toString(i) + "-0-0-0-0");
				}
				notifiedAuctionPlayers = 0;
				auctionRoundNumber++;
				
				System.out.println("Zakończono runde licytacji!!!!");
				if (auctionRoundNumber == 4) {
					System.out.println("!!!!!Wyloniono zwyciezce, rozdano kase!!!!!!!!!!");
					// Tu trzeba bedzie wrzucic Game Logic żeby wyłonic zwycięzcę
					tourNumber++;
					
					dealer = dealer + 1;
					smallBlind = smallBlind + 1;
					bigBlind = bigBlind + 1;
					
					//The game must be begun by first player on the left from Big Blind
					if (server.limitOfPlayers > 2) {
						if (bigBlind == server.limitOfPlayers) {
							server.broadcast("UnlockAuctionButtons-1-0-0-0-0");
						}
						else {
							server.broadcast("UnlockAuctionButtons-" + (bigBlind + 1) + "-0-0-0-0");
						}
					}
					// When there are only 2 players in the game, dealer begins the licitation
					else {
						server.broadcast("UnlockAuctionButtons-" + dealer + "-0-0-0-0");
					}
					//Rozdanie nowych kart graczom jak w lini 67 tej klasy
					
				}
			}
		}
		
	}
	
	public int drawDealer(int min, int max) {
	    Random rand = new Random();

	    // nextInt is normally exclusive of the top value,
	    // so add 1 to make it inclusive
	    int randomDealer = rand.nextInt((max - min) + 1) + min;

	    return randomDealer;
	}
	
	

}
