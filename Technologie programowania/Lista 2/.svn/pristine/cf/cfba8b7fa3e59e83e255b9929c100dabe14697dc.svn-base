import java.awt.*;

import java.awt.event.*;
import java.io.*;
import java.net.*;
import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

import javax.swing.AbstractButton;
import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.border.TitledBorder;

/**
 * Klasa SocketClient umozliwia wysylanie polecen do serwera
 * @author ubuntu
 *
 */

class SocketClient extends JFrame implements ActionListener, Runnable {
  
  public String personalNumber = "";
  public String status = "";
  boolean isConnected = false;
  
  public Hashtable buttonsList = new Hashtable();
  
  //Fields which represent Cards
  
  String cardHeld1 = "";
  String cardHeld2 = "";
  String cardHeld3 = "";
  String cardHeld4 = "";
  
  
  public String[] parts;
  public String part1 = "";
  public String part2 = "";
  public String part3 = "";
  public String part4 = "";
  public String part5 = "";
  public String part6 = "";
	
  JLabel output;
  JLabel informationZero;
  JLabel informationOne;
  JLabel nicknameLabel;
  JTextField nicknameTextField;
  JButton button;
  JButton connect;
  JRadioButton buttonP;
  JRadioButton buttonM;
  JRadioButton buttonR;
  JTextField hostTextField;
  JTextField portTextField;
  JTextField input;
  Socket socket = null;
  PrintWriter out = null;
  BufferedReader in = null;
  //ButtonGroup cardsButtonGroup;
  JLabel numberOfTokensTitle;
  JLabel numberOfTokens;
  JLabel gamerStatusTitle;
  JButton sendCards;
  JLabel gamerStatus;
  JToggleButton card1;
  JToggleButton card2;
  JToggleButton card3;
  JToggleButton card4;
  
  //**********************************************************************************************
  
  JLabel gamer1NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer1Number = new JLabel("...");
  JLabel gamer1NameTitle = new JLabel("Pseudonim:");
  JLabel gamer1Name = new JLabel("...");
  JLabel gamer1TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer1Tokens = new JLabel("...");
  JLabel gamer1StatTitle = new JLabel("Status gracza:");
  JLabel gamer1Stat = new JLabel("...");
  
  JLabel gamer2NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer2Number = new JLabel("...");
  JLabel gamer2NameTitle = new JLabel("Pseudonim:");
  JLabel gamer2Name = new JLabel("...");
  JLabel gamer2TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer2Tokens = new JLabel("...");
  JLabel gamer2StatTitle = new JLabel("Status gracza:");
  JLabel gamer2Stat = new JLabel("...");
 
  JLabel gamer3NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer3Number = new JLabel("...");
  JLabel gamer3NameTitle = new JLabel("Pseudonim:");
  JLabel gamer3Name = new JLabel("...");
  JLabel gamer3TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer3Tokens = new JLabel("...");
  JLabel gamer3StatTitle = new JLabel("Status gracza:");
  JLabel gamer3Stat = new JLabel("...");
 
  JLabel gamer4NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer4Number = new JLabel("...");
  JLabel gamer4NameTitle = new JLabel("Pseudonim:");
  JLabel gamer4Name = new JLabel("...");
  JLabel gamer4TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer4Tokens = new JLabel("...");
  JLabel gamer4StatTitle = new JLabel("Status gracza:");
  JLabel gamer4Stat = new JLabel("...");
  
  JLabel gamer5NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer5Number = new JLabel("...");
  JLabel gamer5NameTitle = new JLabel("Pseudonim:");
  JLabel gamer5Name = new JLabel("...");
  JLabel gamer5TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer5Tokens = new JLabel("...");
  JLabel gamer5StatTitle = new JLabel("Status gracza:");
  JLabel gamer5Stat = new JLabel("...");
  
  JLabel gamer6NumberTitle = new JLabel("Numer gracza:");
  JLabel gamer6Number = new JLabel("...");
  JLabel gamer6NameTitle = new JLabel("Pseudonim:");
  JLabel gamer6Name = new JLabel("...");
  JLabel gamer6TokensTitle = new JLabel("Liczba żetonów:");
  JLabel gamer6Tokens = new JLabel("...");
  JLabel gamer6StatTitle = new JLabel("Status gracza:");
  JLabel gamer6Stat = new JLabel("...");
  
  //****************************************************************************************************8
  
  JPanel panelG;
  JPanel allGamers;
  JPanel gamer1;
  JPanel gamer2;
  JPanel gamer3;
  JPanel gamer4;
  JPanel gamer5;
  JPanel gamer6;
  
  JPanel auction = new JPanel();
  
  JButton Check;
  JButton Bet;
  JButton Raise;
  JButton Call;
  JButton Fold;
  JButton Allin;
  JLabel Auctions;
  JLabel Bid;
  JLabel BidValue;
  JLabel BidPlayer;
  JLabel BidPlayerValue;
  JLabel Offer;
  JTextField YourOffer;
  
  
  
  
  /**
   * Konstruktor SocketClient tworzy GUI klienta
   */

  SocketClient() {
	setLocation(40, 20);
	setSize(1010, 700);
	setLayout(null);
	setTitle("Gracz");
    setFont(new Font(Font.SANS_SERIF,Font.PLAIN,40));
    informationZero = new JLabel("Podaj adres hosta:");
    informationZero.setBounds(10, 10, 150, 30);
    hostTextField = new JTextField("localhost");
    hostTextField.setBounds(160, 10, 100, 30);
    informationOne = new JLabel("Podaj numer portu:");
    informationOne.setBounds(275, 10, 150, 30);
    portTextField = new JTextField("4444");
    portTextField.setBounds(430, 10, 100, 30);
    nicknameLabel = new JLabel("Pseudonim: ");
    nicknameLabel.setBounds(550, 10, 100, 30);
    nicknameTextField = new JTextField();
    nicknameTextField.setBounds(650, 10, 100, 30);    
    connect = new JButton("Połącz");
    connect.setBounds(760, 10, 100, 30);
    connect.addActionListener(this);
   

    add(informationZero);
    add(hostTextField);
    add(informationOne);
    add(portTextField);
    add(nicknameLabel);
    add(nicknameTextField);
    add(connect);
    
    output = new JLabel(".......");
    output.setBounds(870, 10, 100, 30);
    add(output); // <--- Testowy textfield
    
    // Panel Of Gamer
    
    panelG = new JPanel();
    
    panelG.setSize(750, 350);
    panelG.setLocation(0, 360);
    panelG.setLayout(null);
    
    numberOfTokensTitle = new JLabel("Liczba żetonów:");
    numberOfTokensTitle.setBounds(0, 0 , 150, 30);
    numberOfTokens = new JLabel("...");
    numberOfTokens.setBounds(160, 0, 80, 30);
    gamerStatusTitle = new JLabel("Status gracza:");
    gamerStatusTitle.setBounds(290, 0, 150, 30);
    gamerStatus = new JLabel("...");
    gamerStatus.setBounds(400, 0, 100, 30);
    sendCards = new JButton("Zamien karty");
    sendCards.addActionListener(this);
    sendCards.setBounds(520, 0, 200, 30);
    card1= new JToggleButton ("Karta 1");
    card1.setBounds(0, 40, 174, 265);
    card2= new JToggleButton ("Karta 2");
    card2.setBounds(185, 40, 174, 265);    
    card3= new JToggleButton ("Karta 3");
    card3.setBounds(370, 40, 174, 265);    
    card4= new JToggleButton ("Karta 4");
    card4.setBounds(555, 40, 174, 265);    
    
    //Adding buttons representing cards to Hashtable - it will enable multiple selection
    
    buttonsList.put(1, card1);
    buttonsList.put(2, card2);
    buttonsList.put(3, card3);
    buttonsList.put(4, card4);
    
    
    panelG.add(gamerStatusTitle);
    panelG.add(gamerStatus);
    panelG.add(numberOfTokensTitle);
    panelG.add(numberOfTokens);
    panelG.add(sendCards);
    panelG.add(card1);
    panelG.add(card2);
    panelG.add(card3);
    panelG.add(card4);
    
    panelG.setVisible(true);
    add(panelG);
    
    // Panel of All Gamers
    
    allGamers = new JPanel();
    add(allGamers);
    allGamers.setLocation(0, 50);
    allGamers.setSize(1000, 300);
    allGamers.setLayout(new GridLayout(3, 2));
    
    // Panel of One Gamer
    
    TitledBorder title;
	title = BorderFactory.createTitledBorder("");
    //**************************1*************
    gamer1 = new JPanel();
	gamer1.setBorder(title);
	
	gamer1.setLayout(new GridLayout(2, 2));

	gamer1.add(gamer1NumberTitle);
	gamer1.add(gamer1Number);
	gamer1.add(gamer1NameTitle);
	gamer1.add(gamer1Name);
	gamer1.add(gamer1TokensTitle);
	gamer1.add(gamer1Tokens);
	gamer1.add(gamer1StatTitle);
	gamer1.add(gamer1Stat);
	
	gamer1.setVisible(true);
    allGamers.add(gamer1);
    gamer1Number.setText("1");
    
  //**************************2*************
    gamer2 = new JPanel();
    gamer2.setBorder(title);
	
	gamer2.setLayout(new GridLayout(2, 2));

	gamer2.add(gamer2NumberTitle);
	gamer2.add(gamer2Number);
	gamer2.add(gamer2NameTitle);
	gamer2.add(gamer2Name);
	gamer2.add(gamer2TokensTitle);
	gamer2.add(gamer2Tokens);
	gamer2.add(gamer2StatTitle);
	gamer2.add(gamer2Stat);
	
	gamer2.setVisible(true);
    allGamers.add(gamer2);
    gamer2Number.setText("2");
    
  //**************************3*************
    gamer3 = new JPanel();
    gamer3.setBorder(title);
	
	gamer3.setLayout(new GridLayout(2, 2));

	gamer3.add(gamer3NumberTitle);
	gamer3.add(gamer3Number);
	gamer3.add(gamer3NameTitle);
	gamer3.add(gamer3Name);
	gamer3.add(gamer3TokensTitle);
	gamer3.add(gamer3Tokens);
	gamer3.add(gamer3StatTitle);
	gamer3.add(gamer3Stat);
	
	gamer3.setVisible(true);
    allGamers.add(gamer3);
    gamer3Number.setText("3");
    
  //**************************4*************
    gamer4 = new JPanel();
    gamer4.setBorder(title);
	
	gamer4.setLayout(new GridLayout(2, 2));

	gamer4.add(gamer4NumberTitle);
	gamer4.add(gamer4Number);
	gamer4.add(gamer4NameTitle);
	gamer4.add(gamer4Name);
	gamer4.add(gamer4TokensTitle);
	gamer4.add(gamer4Tokens);
	gamer4.add(gamer4StatTitle);
	gamer4.add(gamer4Stat);
	
	gamer4.setVisible(true);
    allGamers.add(gamer4);
    gamer4Number.setText("4");
    
  //**************************5*************
    gamer5 = new JPanel();
    gamer5.setBorder(title);
	
	gamer5.setLayout(new GridLayout(2, 2));

	gamer5.add(gamer5NumberTitle);
	gamer5.add(gamer5Number);
	gamer5.add(gamer5NameTitle);
	gamer5.add(gamer5Name);
	gamer5.add(gamer5TokensTitle);
	gamer5.add(gamer5Tokens);
	gamer5.add(gamer5StatTitle);
	gamer5.add(gamer5Stat);
	
	gamer5.setVisible(true);
    allGamers.add(gamer5);
    gamer5Number.setText("5");
  //**************************6*************
    gamer6 = new JPanel();
    gamer6.setBorder(title);
	
	gamer6.setLayout(new GridLayout(2, 2));

	gamer6.add(gamer6NumberTitle);
	gamer6.add(gamer6Number);
	gamer6.add(gamer6NameTitle);
	gamer6.add(gamer6Name);
	gamer6.add(gamer6TokensTitle);
	gamer6.add(gamer6Tokens);
	gamer6.add(gamer6StatTitle);
	gamer6.add(gamer6Stat);
	
	gamer6.setVisible(true);
    allGamers.add(gamer6);
    gamer6Number.setText("6");
    // Auction Panel
    
    JPanel auction = new JPanel();
    
    Auctions = new JLabel("Menu licytacji");
    Bid = new JLabel("Stawka:");
    BidValue = new JLabel("0");
    BidPlayer = new JLabel("Gracz: ");
    BidPlayerValue = new JLabel("-");
    Offer = new JLabel("Twoja oferta:");
    YourOffer = new JTextField();
    Check = new JButton("Check");
    Bet = new JButton("Bet");
    Raise = new JButton("Raise");
    Call = new JButton("Call");
    Fold = new JButton("Fold");
    Allin = new JButton("All in");
    
    auction.setLayout(null);
    auction.setBackground(Color.RED);
    
    add(auction);
    
    auction.add(Check);
    auction.add(Bet);
    auction.add(Raise);
    auction.add(Call);
    auction.add(Fold);
    auction.add(Allin);
    auction.add(Auctions);
    auction.add(Bid);
    auction.add(BidValue);
    auction.add(BidPlayer);
    auction.add(BidPlayerValue);
    auction.add(Offer);
    auction.add(YourOffer);
   
    Check.addActionListener(this);
    Raise.addActionListener(this);
    Bet.addActionListener(this);
    Call.addActionListener(this);
    Fold.addActionListener(this);
    Allin.addActionListener(this);
   
   
    
    auction.setBounds(800,370, 200,300);
    Auctions.setBounds(15,20, 250, 20);
    Bid.setBounds(15, 50, 100, 20);
    BidValue.setBounds(75, 50, 120, 20);
    BidPlayer.setBounds(120, 50, 120, 20);
    BidPlayerValue.setBounds(180, 50, 50, 20);
    Offer.setBounds(15, 80, 110, 20);
    YourOffer.setBounds(115, 80, 80, 20);
    Check.setBounds(15, 110, 90, 20);
    Bet.setBounds(15, 140, 90, 20);
    Raise.setBounds(15, 170, 90, 20);
    Call.setBounds(15, 200, 90, 20);
    Fold.setBounds(15, 230, 90, 20);
    Allin.setBounds(15, 260, 90, 20); 
    
    // Blocking all buttons. If Button connect is pressed all bottons will be unblocked
    blockAllButtons();
   
    
}

public void onCheck()
{
   String str = personalNumber + "-Check-test-0-0-0";
   out.println(str);
}

public void onBet()
{
	String str = personalNumber + "-Bet-test-0-0-0";
	   out.println(str);
}

public void onRaise()
{
	String str = personalNumber + "-Raise-test-0-0-0";
	   out.println(str);
}


public void onCall()
{
	String str = personalNumber + "-Call-test-0-0-0";
	   out.println(str);
}

public void onFold()
{
	String str = personalNumber + "-Fold-test-0-0-0";
	   out.println(str);
}

public void onAllin()
{
	String str = personalNumber + "-Allin-test-0-0-0";
	   out.println(str);
}

public void onSendCards() { 
	String str = personalNumber + "-ChangeOfCards-0-0-0-0";
	
	out.println(str);
    
}

	public void blockAllButtons() {
		Check.setEnabled(false);
	    Bet.setEnabled(false);
	    Raise.setEnabled(false);
	    Call.setEnabled(false);
	    Fold.setEnabled(false);
	    Allin.setEnabled(false);
	    
	    card1.setEnabled(false);
	    card2.setEnabled(false);
	    card3.setEnabled(false);
	    card4.setEnabled(false);
	    sendCards.setEnabled(false);
	}
    
	public void unblockAllButtons() {
		Check.setEnabled(true);
	    Bet.setEnabled(true);
	    Raise.setEnabled(true);
	    Call.setEnabled(true);
	    Fold.setEnabled(true);
	    Allin.setEnabled(true);
	    
	    card1.setEnabled(true);
	    card2.setEnabled(true);
	    card3.setEnabled(true);
	    card4.setEnabled(true);
	    sendCards.setEnabled(true);
	}
  

  public void actionPerformed(ActionEvent event) {
	if(event.getSource() == sendCards) {
		onSendCards();
    }
    else if(event.getSource() == connect) {
    	listenSocket();
    }
    else if (event.getSource() == Check) {
    	onCheck();
    }
    else if (event.getSource() == Bet) {
    	onBet();
    }
    else if (event.getSource() == Raise) {
    	onRaise();
    }
    else if (event.getSource() == Call) {
    	onCall();
    }
    else if (event.getSource() == Fold) {
    	onFold();
    }
    else if (event.getSource() == Allin) {
    	onAllin();
    }
  }

  public void listenSocket(){
    try {
    	if (isConnected == true) {}
    	else {
      String hostAddress = hostTextField.getText();
      int portAddress = Integer.parseInt(portTextField.getText());
      socket = new Socket(hostAddress, portAddress);
      System.out.println ("Połączono z socketem: " + socket);
      out = new PrintWriter(socket.getOutputStream(), true);
      in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
      
      //Prosba o przydzielenie numeru gracza
      
      personalNumber = in.readLine();
      changeGamerColor();
      output.setText(personalNumber);
      
      new Thread (this).start();
      
      isConnected = true;
    	}
    }
    catch (UnknownHostException e) {
       System.out.println("Unknown host"); System.exit(1);
     }
     catch  (IOException e) {
       System.out.println("No I/O");
     }
    
  }
  public void run() {
	  while (true) {
		  
		  try {
			String message = in.readLine();
			GUIinterpreter(message);
			
			 System.out.println("Message odebrana przez klienta: //" + message);
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		  
		  
		  
	  }
  }
  
  public void GUIinterpreter(String message) {
	  
	  parts = message.split("-");
	  part1 = parts[0];
	  part2 = parts[1];
	  part3 = parts[2];
	  part4 = parts[3];
	  part5 = parts[4];
	  part6 = parts[5];
	  
	  if (part1.equals("Status")) {
		  if (part2.equals(personalNumber)) {
			  status = "dealer";
			  gamerStatus.setText("Dealer");
		  }
		  else if (part3.equals(personalNumber)) {
			  status = "smallBlind";
			  gamerStatus.setText("Small Blind");
		  }
		  else if (part4.equals(personalNumber)) {
			  status = "bigBlind";
			  gamerStatus.setText("Big Blind");
		  }
		  
		  printGamersStatus();
		  output.setText(message);
	  }
	  else if (part1.equals("Tokens")) {
		  numberOfTokens.setText(part2);
		  printGamersTokens();
		  output.setText(message);		  
	  }
	  
	  else if (part1.equals("BasicCards")) {
		  printGamerCards();
	  }
	  else if (part1.equals("UnblockButtons")) {
		  unblockAllButtons();
	  }
	  else {
	  
	  output.setText(message);
	  }
  }
  
  public void changeGamerColor() {
	  if (personalNumber.equals("1")) {
		  gamer1.setBackground(Color.ORANGE); 
	  }
	  if (personalNumber.equals("2")) {
		  gamer2.setBackground(Color.ORANGE); 
	  }
	  if (personalNumber.equals("3")) {
		  gamer3.setBackground(Color.ORANGE); 
	  }
	  if (personalNumber.equals("4")) {
		  gamer4.setBackground(Color.ORANGE); 
	  }
	  if (personalNumber.equals("5")) {
		  gamer5.setBackground(Color.ORANGE); 
	  }
	  if (personalNumber.equals("6")) {
		  gamer6.setBackground(Color.ORANGE); 
	  }
  }
  
  public void printGamersStatus() {
	  if (part2.equals("1")) {
		  gamer1Stat.setText("Dealer");
	  }
	  else if (part2.equals("2")) {
		  gamer2Stat.setText("Dealer");
	  }
	  else if (part2.equals("3")) {
		  gamer3Stat.setText("Dealer");
	  }
	  else if (part2.equals("4")) {
		  gamer4Stat.setText("Dealer");
	  }
	  else if (part2.equals("5")) {
		  gamer5Stat.setText("Dealer");
	  }
	  else if (part2.equals("6")) {
		  gamer6Stat.setText("Dealer");
	  }
	  
	  if (part3.equals("1")) {
		  gamer1Stat.setText("Small Blind");
	  }
	  else if (part3.equals("2")) {
		  gamer2Stat.setText("Small Blind");
	  }
	  else if (part3.equals("3")) {
		  gamer3Stat.setText("Small Blind");
	  }
	  else if (part3.equals("4")) {
		  gamer4Stat.setText("Small Blind");
	  }
	  else if (part3.equals("5")) {
		  gamer5Stat.setText("Small Blind");
	  }
	  else if (part3.equals("6")) {
		  gamer6Stat.setText("Small Blind");
	  }
	  
	  if (part4.equals("1")) {
		  gamer1Stat.setText("Big Blind");
	  }
	  else if (part4.equals("2")) {
		  gamer2Stat.setText("Big Blind");
	  }
	  else if (part4.equals("3")) {
		  gamer3Stat.setText("Big Blind");
	  }
	  else if (part4.equals("4")) {
		  gamer4Stat.setText("Big Blind");
	  }
	  else if (part4.equals("5")) {
		  gamer5Stat.setText("Big Blind");
	  }
	  else if (part4.equals("6")) {
		  gamer6Stat.setText("Big Blind");
	  }
  }
  
  public void printGamersTokens() {
	  gamer1Tokens.setText(part2);
	  gamer2Tokens.setText(part2);
	  gamer3Tokens.setText(part2);
	  gamer4Tokens.setText(part2);
	  gamer5Tokens.setText(part2);
	  gamer6Tokens.setText(part2);
  }
  
  public void printGamerCards () {
	  if (part2.equals(personalNumber)) {
		  card1.setText(part3);
		  card2.setText(part4);
		  card3.setText(part5);
		  card4.setText(part6);
		  
	  }
  }
  

  public static void main(String[] args){
    SocketClient frame = new SocketClient();
    frame.addWindowListener( new WindowAdapter() {
                               public void windowClosing(WindowEvent e) {
                                 System.exit(0);
                               }
                             } );
    //frame.pack();
    frame.setVisible(true);
    frame.setResizable(false);
    //frame.run();
    
    
  }
}