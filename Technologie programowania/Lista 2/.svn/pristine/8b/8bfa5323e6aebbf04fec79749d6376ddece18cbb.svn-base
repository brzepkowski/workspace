import java.awt.*;

import java.awt.event.*;
import java.io.*;
import java.net.*;

import javax.swing.BorderFactory;
import javax.swing.ButtonGroup;
import javax.swing.GroupLayout;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JRadioButton;
import javax.swing.JTextField;
import javax.swing.JToggleButton;
import javax.swing.border.TitledBorder;

/**
 * Klasa SocketClient umozliwia wysylanie polecen do serwera
 * @author ubuntu
 *
 */

class SocketClient extends JFrame implements ActionListener {
  JLabel output;
  JLabel informationZero;
  JLabel informationOne;
  JLabel informationTwo;
  JLabel informationThree;
  JLabel informationFour;
  JButton button;
  JButton connect;
  ButtonGroup bg;
  JRadioButton buttonP;
  JRadioButton buttonM;
  JRadioButton buttonR;
  JTextField hostTextField;
  JTextField portTextField;
  JTextField input;
  Socket socket = null;
  PrintWriter out = null;
  BufferedReader in = null;
  
  /**
   * Konstruktor SocketClient tworzy GUI klienta
   */

  SocketClient() {
	setLocation(40, 20);
	setSize(1010, 700);
	setLayout(null);
	setTitle("Gracz");
    setFont(new Font(Font.SANS_SERIF,Font.PLAIN,40));
    informationZero = new JLabel("Podaj adres hosta:");
    informationZero.setBounds(10, 10, 150, 30);
    hostTextField = new JTextField("localhost");
    hostTextField.setBounds(160, 10, 100, 30);
    informationOne = new JLabel("Podaj numer portu:");
    informationOne.setBounds(275, 10, 150, 30);
    portTextField = new JTextField("4444");
    portTextField.setBounds(430, 10, 100, 30);
    connect = new JButton("Połącz");
    connect.setBounds(550, 10, 100, 30);
    connect.addActionListener(this);
   

    add(informationZero);
    add(hostTextField);
    add(informationOne);
    add(portTextField);
    add(connect);
    
    // Panel Of Gamer
    
    JPanel panelG = new JPanel();
    
    panelG.setSize(750, 350);
    panelG.setLocation(0, 360);
    panelG.setLayout(null);
    
    JLabel numberOfTokensTitle = new JLabel("Liczba żetonów:");
    numberOfTokensTitle.setBounds(0, 0 , 150, 30);
    JLabel numberOfTokens = new JLabel("...");
    numberOfTokens.setBounds(160, 0, 80, 30);
    JLabel gamerStatusTitle = new JLabel("Status gracza:");
    gamerStatusTitle.setBounds(290, 0, 150, 30);
    JLabel gamerStatus = new JLabel("...");
    gamerStatus.setBounds(400, 0, 100, 30);
    JButton sendCards = new JButton("Zamien karty");
    sendCards.setBounds(520, 0, 200, 30);
    JToggleButton kart1= new JToggleButton ("Karta 1");
    kart1.setBounds(0, 40, 174, 265);
    JToggleButton kart2= new JToggleButton ("Karta 2");
    kart2.setBounds(185, 40, 174, 265);    
    JToggleButton kart3= new JToggleButton ("Karta 3");
    kart3.setBounds(370, 40, 174, 265);    
    JToggleButton kart4= new JToggleButton ("Karta 4");
    kart4.setBounds(555, 40, 174, 265);    
    
    panelG.add(gamerStatusTitle);
    panelG.add(gamerStatus);
    panelG.add(numberOfTokensTitle);
    panelG.add(numberOfTokens);
    panelG.add(sendCards);
    panelG.add(kart1);
    panelG.add(kart2);
    panelG.add(kart3);
    panelG.add(kart4);
    
    panelG.setVisible(true);
    add(panelG);
    
    // Panel of All Gamers
    
    JPanel allGamers = new JPanel();
    add(allGamers);
    allGamers.setLocation(0, 50);
    allGamers.setSize(1000, 300);
    allGamers.setLayout(new GridLayout(3, 2));
    
    // Panel of One Gamer
    
    JPanel gamer1 = new JPanel();
    createPanel (gamer1);
    allGamers.add(gamer1);
    
    JPanel gamer2 = new JPanel();
    createPanel (gamer2);
    allGamers.add(gamer2);
    
    JPanel gamer3 = new JPanel();
    createPanel (gamer3);
    allGamers.add(gamer3);
    
    JPanel gamer4 = new JPanel();
    createPanel (gamer4);
    allGamers.add(gamer4);
    
    JPanel gamer5 = new JPanel();
    createPanel (gamer5);
    allGamers.add(gamer5);
    
    JPanel gamer6 = new JPanel();
    createPanel (gamer6);
    allGamers.add(gamer6);
    
    // Auction Panel
    
    JPanel auction = new JPanel();
    
    JButton Check = new JButton("Check");
    JButton Rise = new JButton("Rise");
    JButton Bet = new JButton("Bet");
    JButton Call = new JButton("Call");
    JButton Fold = new JButton("Fold");
    JButton Allin = new JButton("All in");
    JLabel Auctions = new JLabel("Menu licytacji");
    JLabel Bid = new JLabel("Stawka:");
    JLabel BidValue = new JLabel("0");
    JLabel Offer = new JLabel("Twoja oferta:");
    JTextField YourOffer = new JTextField();
    
    auction.setLayout(null);
    auction.setBackground(Color.RED);
    
    add(auction);
    
    auction.add(Check);
    auction.add(Rise);
    auction.add(Bet);
    auction.add(Call);
    auction.add(Fold);
    auction.add(Allin);
    auction.add(Auctions);
    auction.add(Bid);
    auction.add(BidValue);
    auction.add(Offer);
    auction.add(YourOffer);
/*   
    Check.addActionListener(this);
    Rise.addActionListener(this);
    Bet.addActionListener(this);
    Call.addActionListener(this);
    Fold.addActionListener(this);
    Allin.addActionListener(this);
   
   */
    
    //  dodać RISE
    auction.setBounds(800,370, 200,300);
    Auctions.setBounds(15,20, 250, 20);
    Bid.setBounds(15, 50, 100, 20);
    BidValue.setBounds(75, 50, 120, 20);
    Offer.setBounds(15, 80, 120, 20);
    YourOffer.setBounds(15, 110, 80, 20);
    Check.setBounds(15, 140, 90, 20);
    Bet.setBounds(15, 170, 90, 20);
    Call.setBounds(15, 200, 90, 20);
    Fold.setBounds(15, 230, 90, 20);
    Allin.setBounds(15, 260, 90, 20);
   
    
}

public void onCheck()
{
   

}

public void onRise()
{
   
}

public void onBet()
{
   
}

public void onCall()
{
   
}

public void onFold()
{
   
}

public void onAllin()
{
   
}
    
    
           
    
    


public void createPanel (JPanel gamer) {
	
	TitledBorder title;
	title = BorderFactory.createTitledBorder("");
	gamer.setBorder(title);
	
	gamer.setLayout(new GridLayout(2, 2));
	
	JLabel gamerNumberTitle = new JLabel("Numer gracza:");
	JLabel gamerNumber = new JLabel("...");
	JLabel gamerNameTitle = new JLabel("Pseudonim:");
	JLabel gamerName = new JLabel("...");
	JLabel gamerTokensTitle = new JLabel("Liczba żetonów:");
	JLabel gamerTokens = new JLabel("...");
	JLabel gamerRoundTitle = new JLabel("Runda gracza:");
	JLabel gamerRound = new JLabel("...");
	
	gamer.add(gamerNumberTitle);
	gamer.add(gamerNumber);
	gamer.add(gamerNameTitle);
	gamer.add(gamerName);
	gamer.add(gamerTokensTitle);
	gamer.add(gamerTokens);
	gamer.add(gamerRoundTitle);
	gamer.add(gamerRound);
	
	gamer.setVisible(true);
}
   
  

  public void actionPerformed(ActionEvent event) {
    if(event.getSource() == button) {
      try {
    	  
    	  if (buttonP.isSelected()){
    		  //System.out.println("Wcisnieto przycisk P");
    		  out.print("P ");
    	  }
    	  if (buttonM.isSelected()){
    		  //System.out.println("Wcisnieto przycisk M");
    		  out.print("M ");
    	  }
    	  if (buttonR.isSelected()){
    		  //System.out.println("Wcisnieto przycisk R");
    		  out.print("R ");
    	  }
    	  if (buttonP.isSelected() == false && buttonM.isSelected() == false && buttonR.isSelected() == false) {
    		  System.out.println("Zaden przycisk nie zostal wcisniety");
    	  }
    	  
    	  out.println(input.getText());
    	 
        output.setText(in.readLine());
      }
      catch (IOException e) {
        System.out.println("Read failed"); System.exit(1);
      }
      input.setText("");
      input.requestFocus();
    }
    else if(event.getSource() == connect) {
    	listenSocket();
    }
  }

  public void listenSocket(){
    try {
      String hostAddress = hostTextField.getText();
      int portAddress = Integer.parseInt(portTextField.getText());
      socket = new Socket(hostAddress, portAddress);
      out = new PrintWriter(socket.getOutputStream(), true);
      in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
      GamerGUI player = new GamerGUI();
    }
    catch (UnknownHostException e) {
       System.out.println("Unknown host"); System.exit(1);
     }
     catch  (IOException e) {
       System.out.println("No I/O");
     }
  }

  public static void main(String[] args){
	GamerGUI player;
    SocketClient frame = new SocketClient();
    frame.addWindowListener( new WindowAdapter() {
                               public void windowClosing(WindowEvent e) {
                                 System.exit(0);
                               }
                             } );
    //frame.pack();
    frame.setVisible(true);
    frame.setResizable(false);
  }
}