<<<<<<< .mine
import java.io.*;
import java.net.*;

/**
 * Klasa SocketServer tworzy sserwer i umozliwia odbieranie pytan od klienta
 * @author ubuntu
 *
 */
class SocketServer {
  ServerSocket server = null;
  Socket client = null;
  BufferedReader in = null;
  PrintWriter out = null;
  String line = "";
  char OP;
  int num;
  String odp;
  String rozkladArgs;
 // RozkladLiczby rozklad;
  public static String rozmiar_sita;
  
  /**
   * Konstruktor SocketServer tworzy port, na ktorym nasluchuje serwer
   * @param port - numer portu
   */
  SocketServer(int port) {   
    try {
      server = new ServerSocket(port); 
    } 
    catch (IOException e) {
      System.out.println("Could not listen on port: " + port); System.exit(-1);
    }
  }

  /**
   * metoda listenSocket umozliwia zaakceptowanie polaczenia z klientem i wyswietla odpowiednie komunikaty
   */
  public void listenSocket() {
	  System.out.println("Uruchomiono serwer");
	  while (true) {
    try {
      client = server.accept();
      System.out.println("Nawiazano polaczenie");
    } 
    catch (IOException e) {
      System.out.println("Accept failed: 4444"); System.exit(-1);
    }
    new Thread( new Watek(this, client)).start();
	  
    try {
      in = new BufferedReader(new InputStreamReader(client.getInputStream()));
      out = new PrintWriter(client.getOutputStream(), true);
    } 
    catch (IOException e) {
      System.out.println("Accept failed: 4444"); System.exit(-1);
    }
	  }
   /* while(line != null) {
      try {
        line = in.readLine();
        	
       // System.out.println(line);
        out.println("-> ("+line+")");
      } 
      catch (IOException e) {
        System.out.println("Read failed"); System.exit(-1);
      } 
    }*/
  }

  protected void finalize() {
    try {
      in.close();
      out.close();
      client.close();
      server.close();
    } 
    catch (IOException e) {
      System.out.println("Could not close."); System.exit(-1);
    }
  }

  public static void main(String[] args) {
	 int port = 0;
	 
	 try {
		port = Integer.parseInt(args[0]);
		rozmiar_sita = args[1];
	 }
	 catch (NumberFormatException ex) {
         System.out.println("Nieprawidlowa dana");
	 }
	 
    SocketServer server = new SocketServer(port);
    server.listenSocket();
  }
}=======

import java.io.*;
import java.net.*;


/**
 * Klasa serwera, każdy z użytkowników to osobny wątek
 * @author Maciej Ubas
 */
class SocketServer extends Thread {

    ServerSocket server = null;
    Socket client = null;
    BufferedReader in = null;
    PrintWriter out = null;
    String line = "";
    int numerPortu;

    /**
     * Konstruktor klasy
     * @param numerPortu port na którym działa serwer
     * @param rozmiarSita rozmiar sita do rozkładu liczby
     */
    SocketServer(int numerPortu) {
        this.numerPortu = numerPortu;
        
        try {
            server = new ServerSocket(numerPortu);
        } catch (IOException e) {
            System.out.println("Could not listen on port " + numerPortu);
            System.exit(-1);
        }
    }

    /**
     * Tworzy nowy wątek dla klienta
     */
    public void listenSocket() {						
        while (true) {
            ClientWorker w;
            try {
                w = new ClientWorker(server.accept());
                Thread t = new Thread(w);
                t.start();
            } catch (IOException e) {
                System.out.println("Accept failed: " + numerPortu);
            }
        }
    }

    protected void finalize() {
        try {
            in.close();
            out.close();
            client.close();
            server.close();
        } catch (IOException e) {
            System.out.println("Could not close.");
        }
    }

    /**
     * Startuje serwer 
     * @param args 
     */
    public static void main(String[] args) {
        int port = 0;
        try {
            port = Integer.parseInt(args[0]);
        } catch (ArrayIndexOutOfBoundsException ex) {
            System.out.println("Please input the port");
            return;
        }
        
        System.out.println("Server has started");
        SocketServer server = new SocketServer(port);
        server.listenSocket();

    }
}
>>>>>>> .r16
