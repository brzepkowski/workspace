(* Module for axiomatizing type "short_short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_short_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type short_short_integer "bounded_type" 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type short_integer "bounded_type" 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = short_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer "bounded_type" 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type long_integer "bounded_type" 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type long_long_integer "bounded_type" 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = long_long_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "natural", created in Gnat2Why.Types.Translate_Type *)
module Standard__natural
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type natural "bounded_type" 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = natural, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "positive", created in Gnat2Why.Types.Translate_Type *)
module Standard__positive
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type positive "bounded_type" 
 
 function first 
   :int =
  1
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = positive, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "short_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__short_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type short_float "bounded_type" 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( ( first <=. x ) /\ ( x <=. last ) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = short_float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "float", created in Gnat2Why.Types.Translate_Type *)
module Standard__float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type float "bounded_type" 
 
 function first 
   :real =
  (-.340282346638528859811704183484516925440.0)
 
 function last 
   :real =
  (340282346638528859811704183484516925440.0)
 
 predicate in_range
   (x : real)  =
  ( ( first <=. x ) /\ ( x <=. last ) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = float, 
 function round_real_tmp = Floating.round_single, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type long_float "bounded_type" 
 
 function first 
   :real =
  (-.179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 function last 
   :real =
  (179769313486231570814527423731704356798070567525844996598917476803157260780028538760589558632766878171540458953514382464234321326889464182768467546703537516986049910576551282076245490090389328944075868508455133942304583236903222948165808559332123348274797826204144723168738177180919299881250404026184124858368.0)
 
 predicate in_range
   (x : real)  =
  ( ( first <=. x ) /\ ( x <=. last ) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_float, 
 function round_real_tmp = Floating.round_double, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "long_long_float", created in Gnat2Why.Types.Translate_Type *)
module Standard__long_long_float
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type long_long_float "bounded_type" 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( ( first <=. x ) /\ ( x <=. last ) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = long_long_float, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "character", created in Gnat2Why.Types.Translate_Type *)
module Standard__character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type character "bounded_type" 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  255
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type wide_character "bounded_type" 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  65535
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "wide_wide_character", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_character
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type wide_wide_character "bounded_type" 
 
 function first 
   :int =
  0
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = wide_wide_character, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "string", created in Gnat2Why.Types.Translate_Type *)
module Standard__string
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__character
 use        Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__character.character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type string  = 
  __t
 
 function to_string 
   (x : __image)  :string
 
 function from_string 
   (x : string)  :__image
 
 clone export "ada__model".Array_Comparison_Axiom with
 type component_type = Standard__character.character, 
 function to_int = Standard__character.to_int

end

(* Module for axiomatizing type "wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_string
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_character
 use        Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__wide_character.wide_character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type wide_string  = 
  __t
 
 clone export "ada__model".Array_Comparison_Axiom with
 type component_type = Standard__wide_character.wide_character, 
 function to_int = Standard__wide_character.to_int

end

(* Module for axiomatizing type "wide_wide_string", created in Gnat2Why.Types.Translate_Type *)
module Standard__wide_wide_string
 use import "_gnatprove_standard".Main
 use        Standard__positive
 use        Standard__wide_wide_character
 use        Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__wide_wide_character.wide_wide_character, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__positive.in_range
 
 type wide_wide_string  = 
  __t
 
 clone export "ada__model".Array_Comparison_Axiom with
 type component_type = Standard__wide_wide_character.wide_wide_character, 
 function to_int = Standard__wide_wide_character.to_int

end

(* Module for axiomatizing type "duration", created in Gnat2Why.Types.Translate_Type *)
module Standard__duration
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type duration "bounded_type" 
 
 function first 
   :__fixed =
  ( -9223372036854775808 )
 
 function last 
   :__fixed =
  9223372036854775807
 
 function inv_small 
   :__fixed =
  1000000000
 
 predicate in_range
   (x : __fixed)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Fixed_Point with
 type t = duration, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range, 
 function inv_small = inv_small

end

(* Module for axiomatizing type "integer_8", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_8
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_8 "bounded_type" 
 
 function first 
   :int =
  ( -128 )
 
 function last 
   :int =
  127
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_8, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_16", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_16
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_16 "bounded_type" 
 
 function first 
   :int =
  ( -32768 )
 
 function last 
   :int =
  32767
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_16, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_32", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_32
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_32 "bounded_type" 
 
 function first 
   :int =
  ( -2147483648 )
 
 function last 
   :int =
  2147483647
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_32, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "integer_64", created in Gnat2Why.Types.Translate_Type *)
module Standard__integer_64
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type integer_64 "bounded_type" 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = integer_64, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_integer", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_integer
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type universal_integer "bounded_type" 
 
 function first 
   :int =
  ( -9223372036854775808 )
 
 function last 
   :int =
  9223372036854775807
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = universal_integer, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "universal_real", created in Gnat2Why.Types.Translate_Type *)
module Standard__universal_real
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Floating
 use import "real".RealInfix

 type universal_real "bounded_type" 
 
 function first 
   :real =
  (-.1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 function last 
   :real =
  (1189731495357231765021263853030970205169063322294624200440323733891737005522970722616410290336528882853545697807495577314427443153670288434198125573853743678673593200706973263201915918282961524365529510646791086614311790632169778838896134786560600399148753433211454911160088679845154866512852340149773037600009125479393966223151383622417838542743917838138717805889487540575168226347659235576974805113725649020884855222494791399377585026011773549180099796226026859508558883608159846900235645132346594476384939859276456284579661772930407806609229102715046085388087959327781622986827547830768080040150694942303411728957777100335714010559775242124057347007386251660110828379119623008469277200965153500208474470792443848545912886723000619085126472111951361467527633519562927597957250278002980795904193139603021470997035276467445530922022679656280991498232083329641241038509239184734786121921697210543484287048353408113042573002216421348917347174234800714880751002064390517234247656004721768096486107994943415703476320643558624207443504424380566136017608837478165389027809576975977286860071487028287955567141404632615832623602762896316173978484254486860609948270867968048078702511858930838546584223040908805996294594586201903766048446790926002225410530775901065760671347200125846406957030257138960983757998926954553052368560758683179223113639519468850880771872104705203957587480013143131444254943919940175753169339392366881856189129931729104252921236835159922322050998001677102784035360140829296398115122877768135706045789343535451696539561254048846447169786893211671087229088082778350518228857646062218739702851655083720992349483334435228984751232753726636066213902281264706234075352071724058665079518217303463782631353393706774901950197841690441824738063162828586857741432581165364040218402724913393320949219498422442730427019873044536620350262386957804682003601447291997123095530057206141866974852846856186514832715974481203121946751686379343096189615107330065552421485195201762858595091051839472502863871632494167613804996319791441870254302706758495192008837915169401581740046711477877201459644461175204059453504764721807975761111720846273639279600339670470037613374509553184150073796412605047923251661354841291884211340823015473304754067072818763503617332908005951896325207071673904547777129682265206225651439919376804400292380903112437912614776255964694221981375146967079446870358004392507659451618379811859392049544036114915310782251072691486979809240946772142727012404377187409216756613634938900451232351668146089322400697993176017805338191849981933008410985993938760292601390911414526003720284872132411955424282101831204216104467404621635336900583664606591156298764745525068145003932941404131495400677602951005962253022823003631473824681059648442441324864573137437595096416168048024129351876204668135636877532814675538798871771836512893947195335061885003267607354388673368002074387849657014576090349857571243045102038730494854256702479339322809110526041538528994849203991091946129912491633289917998094380337879522093131466946149705939664152375949285890960489916121944989986384837022486672249148924678410206183364627416969576307632480235587975245253737035433882960862753427740016333434055083537048507374544819754722228975281083020898682633020285259923084168054539687911418297629988964576482765287504562854924265165217750799516259669229114977788962356670956627138482018191348321687995863652637620978285070099337294396784639879024914514222742527006363942327998483976739987154418554201562244154926653014515504685489258620276085761837129763358761215382565129633538141663949516556000264159186554850057052611431952919918807954522394649627635630178580896692226406235382898535867595990647008385687123810329591926494846250768992258419305480763620215089022149220528069842018350840586938493815498909445461977893029113576516775406232278298314033473276603952231603422824717528181818844304880921321933550869873395861276073670866652375555675803171490108477320096424318780070008797346032906278943553743564448851907191616455141155761939399690767415156402826543664026760095087523945507341556135867933066031744720924446513532366647649735400851967040771103640538150073486891798364049570606189535005089840913826869535090066783324472578712196604415284924840041850932811908963634175739897166596000759487800619164094854338758520657116541072260996288150123144377944008749301944744330784388995701842710004808305012177123560622895076269042856800047718893158089358515593863176652948089031267747029662545110861548958395087796755464137944895960527975209874813839762578592105756284401759349324162148339565350189196811389091843795734703269406342890087805846940352453479398080674273236297887100867175802531561302356064878709259865288416350972529537091114317204887747405539054009425375424119317944175137064689643861517718849867010341532542385911089624710885385808688837777258648564145934262121086647588489260031762345960769508849149662444156604419552086811989770240.0)
 
 predicate in_range
   (x : real)  =
  ( ( first <=. x ) /\ ( x <=. last ) )
 
 clone export "ada__model".Static_Floating_Point with
 type t = universal_real, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "vector" defined at maximum.ads:2, created in Gnat2Why.Types.Translate_Type *)
module Maximum__vector
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__integer.integer, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Standard__integer.in_range
 
 type vector  = 
  __t
 
 clone export "ada__model".Array_Comparison_Axiom with
 type component_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int

end

(* Module for axiomatizing type "TS1bP1" defined at maximum.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__TS1bP1
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type tS1bP1 "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = tS1bP1, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "S1b" defined at maximum.adb:3, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__S1b
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer
 use        Maximum__maximum__TS1bP1
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 clone export "ada__model".Unconstr_Array with
 type component_type = Standard__integer.integer, 
 type base_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int, 
 predicate in_range_base = Standard__integer.in_range, 
 predicate in_range = Maximum__maximum__TS1bP1.in_range
 
 type s1b  = 
  __t
 
 clone export "ada__model".Array_Comparison_Axiom with
 type component_type = Standard__integer.integer, 
 function to_int = Standard__integer.to_int

end

(* Module for defining the constant "a" defined at maximum.ads:3, created in Gnat2Why.Decls.Translate_Constant *)
module Maximum__maximum__a
 use import "_gnatprove_standard".Main
 use        Maximum__vector
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 function a 
   :Maximum__vector.vector

end

(* Module giving an empty axiom for the entity "a" defined at maximum.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maximum__maximum__a__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T7s" defined at maximum.ads:9, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L6s__T7s
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t7s "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = t7s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T9s" defined at maximum.ads:7, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L8s__T9s
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t9s "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int)  =
  ( ( first <= x ) /\ ( x <= last ) )
 
 clone export "ada__model".Static_Discrete with
 type t = t9s, 
 function first = first, 
 function last = last, 
 predicate in_range = in_range

end

(* Module for declaring a program function (and possibly a logic function) for "maximum" defined at maximum.ads:3, created in Gnat2Why.Subprograms.Translate_Subprogram_Spec *)
module Maximum__maximum
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Maximum__vector
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 function maximum 
   (a : Maximum__vector.vector)  :Standard__integer.integer
 
 val maximum 
   (a : Maximum__vector.vector)  :Standard__integer.integer
  requires { ( (Maximum__vector.length a) > 0 ) }
  ensures { ( ( result = (maximum a) ) /\ ( (forall i  : int.
   ( ( ( (Maximum__vector.first a) <= i ) /\ ( i <= (Maximum__vector.last a) ) ) -> ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array a) i)) <= (Standard__integer.to_int result) ) )) /\ exists i  : int.
   ( ( ( (Maximum__vector.first a) <= i ) /\ ( i <= (Maximum__vector.last a) ) ) /\ ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array a) i)) = (Standard__integer.to_int result) ) ) ) ) }


end

(* Module giving an empty axiom for the entity "maximum" defined at maximum.ads:3, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maximum__maximum__axiom
 use import "_gnatprove_standard".Main


end

(* Module for axiomatizing type "T2b" defined at maximum.adb:8, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L_1__T2b
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t2b "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int) 
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t2b, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T6b" defined at maximum.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L_1__L5b__T6b
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t6b "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int) 
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t6b, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T4b" defined at maximum.adb:13, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L_1__L3b__T4b
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t4b "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int) 
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t4b, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T10b" defined at maximum.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L_1__L9b__T10b
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t10b "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int) 
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t10b, 
 predicate in_range = in_range

end

(* Module for axiomatizing type "T8b" defined at maximum.adb:14, created in Gnat2Why.Types.Translate_Type *)
module Maximum__maximum__L_1__L7b__T8b
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t8b "bounded_type" 
 
 function first 
   :int
 
 function last 
   :int
 
 predicate in_range
   (x : int) 
 
 clone export "ada__model".Dynamic_Discrete with
 type t = t8b, 
 predicate in_range = in_range

end
(* Module for defining a ref holding the value of variable "max" defined at maximum.adb:6, created in Gnat2Why.Decls.Translate_Variable *)
module Maximum__maximum__max
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t  = 
  Standard__integer.integer
 
 val max  : ref t

end

(* Module giving an empty axiom for the entity "max" defined at maximum.adb:6, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maximum__maximum__max__axiom
 use import "_gnatprove_standard".Main


end

(* Module for defining a ref holding the value of variable "i" defined at maximum.adb:8, created in Gnat2Why.Decls.Translate_Variable *)
module Maximum__maximum__L_1__i
 use import "_gnatprove_standard".Main
 use        "_gnatprove_standard".Integer
 use import "int".Int

 type t  = 
  int
 
 val i  : ref t

end

(* Module giving an empty axiom for the entity "i" defined at maximum.adb:8, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maximum__maximum__L_1__i__axiom
 use import "_gnatprove_standard".Main


end
(* Module for defining the loop exit exception for the loop"L_1" defined at maximum.adb:9, created in Gnat2Why.Decls.Translate_Loop_Entity *)
module Maximum__maximum__L_1
 use import "_gnatprove_standard".Main

 exception L_1

end

(* Module giving an empty axiom for the entity "L_1" defined at maximum.adb:9, created in Gnat2Why.Driver.Translate_Entity.Generate_Empty_Axiom_Theory *)
module Maximum__maximum__L_1__axiom
 use import "_gnatprove_standard".Main


end
(* Module giving axioms for the type entity "short_short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "natural", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__natural__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "positive", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__positive__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "short_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__short_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "long_long_float", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__long_long_float__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_character", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_character__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "wide_wide_string", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__wide_wide_string__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "duration", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__duration__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_8", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_8__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_16", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_16__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_32", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_32__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "integer_64", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__integer_64__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_integer", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_integer__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "universal_real", created in Gnat2Why.Types.Generate_Type_Completion *)
module Standard__universal_real__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "vector" defined at maximum.ads:2, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__vector__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "TS1bP1" defined at maximum.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__TS1bP1__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "S1b" defined at maximum.adb:3, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__S1b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T7s" defined at maximum.ads:9, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L6s__T7s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T9s" defined at maximum.ads:7, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L8s__T9s__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T2b" defined at maximum.adb:8, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L_1__T2b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T6b" defined at maximum.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L_1__L5b__T6b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T4b" defined at maximum.adb:13, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L_1__L3b__T4b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T10b" defined at maximum.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L_1__L9b__T10b__axiom
 use import "_gnatprove_standard".Main


end

(* Module giving axioms for the type entity "T8b" defined at maximum.adb:14, created in Gnat2Why.Types.Generate_Type_Completion *)
module Maximum__maximum__L_1__L7b__T8b__axiom
 use import "_gnatprove_standard".Main


end

(* Module for checking contracts and absence of run-time errors in subprogram "maximum" defined at maximum.ads:3, created in Gnat2Why.Subprograms.Generate_VCs_For_Subprogram *)
module Maximum__maximum__subprogram_def
 use import "int".Int
 use import "_gnatprove_standard".Main
 use        Standard__integer
 use        Standard__integer__axiom
 use        Standard__integer
 use        Standard__integer__axiom
 use        Maximum__maximum__max
 use        Maximum__maximum__max__axiom
 use        Maximum__maximum__L_1__i
 use        Maximum__maximum__L_1__i__axiom
 use        Maximum__maximum__L_1
 use        Maximum__maximum__L_1__axiom
 use        Maximum__vector
 use        Maximum__vector__axiom
 use        Maximum__maximum__a
 use        Maximum__maximum__a__axiom
 use        Maximum__maximum__TS1bP1
 use        Maximum__maximum__TS1bP1__axiom
 use        "_gnatprove_standard".Integer
 use import "int".Int
 use        "_gnatprove_standard".Array__1

 val maximum__maximum__result "\"GP_Ada_Name:Maximum'Result\""  : ref Standard__integer.integer
 
 let def "GP_Subp:maximum.ads:3" "GP_Pretty_Ada:Maximum.Maximum" "W:diverges:N" 
   (__void_param : unit) 
  requires { true }
  ensures { ( "keep_on_simp" "GP_Reason:VC_POSTCONDITION" "GP_Sloc_VC:maximum.ads:7:33" ( (forall i  : int.
   ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= i ) /\ ( i <= (Maximum__vector.last Maximum__maximum__a.a) ) ) -> ( "GP_Pretty_Ada:A(i) <= Maximum'result" "GP_Sloc:maximum.ads:7:58" ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) i)) <= (Standard__integer.to_int !maximum__maximum__result) ) ) )) /\ exists i  : int.
   ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= i ) /\ ( i <= (Maximum__vector.last Maximum__maximum__a.a) ) ) /\ ( "GP_Pretty_Ada:A(i) = Maximum'result" "GP_Sloc:maximum.ads:9:67" ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) i)) = (Standard__integer.to_int !maximum__maximum__result) ) ) ) ) ) }

   =
  ( ( (any unit
  requires {true} 
  ensures {( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= (Maximum__vector.last Maximum__maximum__a.a) ) -> ( ( (Maximum__vector.first Maximum__maximum__a.a) >= Standard__integer.first ) /\ ( (Maximum__vector.last Maximum__maximum__a.a) <= Standard__integer.last ) ) ) /\ ( ( (Maximum__vector.first Maximum__maximum__a.a) = Maximum__maximum__TS1bP1.first ) /\ ( (Maximum__vector.last Maximum__maximum__a.a) = Maximum__maximum__TS1bP1.last ) ) )} 
  );
  abstract ensures {true}(___ignore(( ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
  (Maximum__vector.length(Maximum__maximum__a.a)) ) > 0 ))) end ;
  (any unit
  requires {true} 
  ensures {( (Maximum__vector.length Maximum__maximum__a.a) > 0 )} 
  ) );
  ( try
   ( Maximum__maximum__max.max := ( (Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (( "GP_Reason:VC_INDEX_CHECK" "keep_on_simp" "GP_Sloc_VC:maximum.adb:6:27" (Maximum__maximum__TS1bP1.range_check_(( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.first(Maximum__maximum__a.a)) ))) ))) );
   ( "GP_Sloc:maximum.adb:9:7" (let temp___standard__maximum_1 = ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.first(Maximum__maximum__a.a)) ) in (
   (let temp___standard__maximum_2 = ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.last(Maximum__maximum__a.a)) ) in (
    ( Maximum__maximum__L_1__i.i := ( temp___standard__maximum_1 );
    (if ((andb(( temp___standard__maximum_1 <= !Maximum__maximum__L_1__i.i )) (( !Maximum__maximum__L_1__i.i <= temp___standard__maximum_2 )))) then (
     try
      let temp___standard__maximum_0 = ref (0) in 
       ( ( "GP_Sloc:maximum.adb:10:10" (if (( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (!Maximum__maximum__L_1__i.i)))) > (Standard__integer.to_int(!Maximum__maximum__max.max)) )) then (
        ( "GP_Sloc:maximum.adb:11:17" Maximum__maximum__max.max := ( (Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (!Maximum__maximum__L_1__i.i)) ) )) else (
        ())) );
       while True do
        invariant { 
         ( "keep_on_simp" "GP_Reason:VC_LOOP_INVARIANT" "GP_Sloc_VC:maximum.adb:13:10" ( (forall j  : int.
          ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= j ) /\ ( j <= !Maximum__maximum__L_1__i.i ) ) -> ( "GP_Pretty_Ada:A(j) <= Max" "GP_Sloc:maximum.adb:13:61" ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) j)) <= (Standard__integer.to_int !Maximum__maximum__max.max) ) ) )) /\ exists k  : int.
          ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= k ) /\ ( k <= !Maximum__maximum__L_1__i.i ) ) /\ ( "GP_Pretty_Ada:A(k) = Max" "GP_Sloc:maximum.adb:14:62" ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) k)) = (Standard__integer.to_int !Maximum__maximum__max.max) ) ) ) ) )
         }
        ( ( (any unit
        requires {true} 
        ensures {( ( (Maximum__vector.first Maximum__maximum__a.a) <= !Maximum__maximum__L_1__i.i ) /\ ( !Maximum__maximum__L_1__i.i <= (Maximum__vector.last Maximum__maximum__a.a) ) )} 
        );
        abstract ensures {true}(___ignore(( (let j = (any int
        ) in (
         (if ((andb(( ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
         (Maximum__vector.first(Maximum__maximum__a.a)) ) <= j )) (( j <= !Maximum__maximum__L_1__i.i )))) then (
          abstract ensures {true}(___ignore(( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (( "GP_Reason:VC_INDEX_CHECK" "keep_on_simp" "GP_Sloc_VC:maximum.adb:13:63" (Maximum__maximum__TS1bP1.range_check_(j)) ))))) <= (Standard__integer.to_int(!Maximum__maximum__max.max)) ))) end ))))
        ;
        (any bool
        requires {true} 
        ensures {( ( result = True ) <-> (forall j  : int.
         ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= j ) /\ ( j <= !Maximum__maximum__L_1__i.i ) ) -> ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) j)) <= (Standard__integer.to_int !Maximum__maximum__max.max) ) )) )} 
        ) ))) end ;
        abstract ensures {true}(___ignore(( (let k = (any int
        ) in (
         (if ((andb(( ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
         (Maximum__vector.first(Maximum__maximum__a.a)) ) <= k )) (( k <= !Maximum__maximum__L_1__i.i )))) then (
          abstract ensures {true}(___ignore(( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (( "GP_Reason:VC_INDEX_CHECK" "keep_on_simp" "GP_Sloc_VC:maximum.adb:14:64" (Maximum__maximum__TS1bP1.range_check_(k)) ))))) = (Standard__integer.to_int(!Maximum__maximum__max.max)) ))) end ))))
        ;
        (any bool
        requires {true} 
        ensures {( ( result = True ) <-> exists k  : int.
         ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= k ) /\ ( k <= !Maximum__maximum__L_1__i.i ) ) /\ ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) k)) = (Standard__integer.to_int !Maximum__maximum__max.max) ) ) )} 
        ) ))) end  );
        ( temp___standard__maximum_0 := ( !Maximum__maximum__L_1__i.i );
        Maximum__maximum__L_1__i.i := ( ( !Maximum__maximum__L_1__i.i + 1 ) );
        (if (( !Maximum__maximum__L_1__i.i <= temp___standard__maximum_2 )) then (
         ( ( "GP_Sloc:maximum.adb:10:10" (if (( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (!Maximum__maximum__L_1__i.i)))) > (Standard__integer.to_int(!Maximum__maximum__max.max)) )) then (
          ( "GP_Sloc:maximum.adb:11:17" Maximum__maximum__max.max := ( (Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (!Maximum__maximum__L_1__i.i)) ) )) else (
          ())) );
         abstract ensures {true}(___ignore(abstract ensures {true}(___ignore(!Maximum__maximum__L_1__i.i)) end )) end ;
         assert { ( "keep_on_simp" "GP_Reason:VC_LOOP_VARIANT" "GP_Sloc_VC:maximum.adb:15:10" ( !Maximum__maximum__L_1__i.i > !temp___standard__maximum_0 ) ) } )) else (
         raise Maximum__maximum__L_1.L_1)) ) )
       done )
     with
      Maximum__maximum__L_1.L_1 -> ()
     end)) )))
   ))
    );
   ( "GP_Sloc:maximum.adb:17:7" ( maximum__maximum__result := ( !Maximum__maximum__max.max );
   raise Return__exc ) );
   raise Return__exc )
  with
   Return__exc -> ()
  end;
  abstract ensures {true}(___ignore(( ( (let i = (any int
  ) in (
   (if ((andb(( ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.first(Maximum__maximum__a.a)) ) <= i )) (( i <= ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.last(Maximum__maximum__a.a)) ) )))) then (
    abstract ensures {true}(___ignore(( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (( "GP_Reason:VC_INDEX_CHECK" "keep_on_simp" "GP_Sloc_VC:maximum.ads:7:60" (Maximum__maximum__TS1bP1.range_check_(i)) ))))) <= (Standard__integer.to_int(!maximum__maximum__result)) ))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( ( result = True ) <-> (forall i  : int.
   ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= i ) /\ ( i <= (Maximum__vector.last Maximum__maximum__a.a) ) ) -> ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) i)) <= (Standard__integer.to_int !maximum__maximum__result) ) )) )} 
  ) ) && ( (let i = (any int
  ) in (
   (if ((andb(( ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.first(Maximum__maximum__a.a)) ) <= i )) (( i <= ( abstract ensures {true}(___ignore(Maximum__maximum__a.a)) end ;
   (Maximum__vector.last(Maximum__maximum__a.a)) ) )))) then (
    abstract ensures {true}(___ignore(( (Standard__integer.to_int((Array__1.get((Maximum__vector.to_array(Maximum__maximum__a.a))) (( "GP_Reason:VC_INDEX_CHECK" "GP_Sloc_VC:maximum.ads:9:69" "keep_on_simp" (Maximum__maximum__TS1bP1.range_check_(i)) ))))) = (Standard__integer.to_int(!maximum__maximum__result)) ))) end ))))
  ;
  (any bool
  requires {true} 
  ensures {( ( result = True ) <-> exists i  : int.
   ( ( ( (Maximum__vector.first Maximum__maximum__a.a) <= i ) /\ ( i <= (Maximum__vector.last Maximum__maximum__a.a) ) ) /\ ( (Standard__integer.to_int (Array__1.get (Maximum__vector.to_array Maximum__maximum__a.a) i)) = (Standard__integer.to_int !maximum__maximum__result) ) ) )} 
  ) ) ))) end ;
  !maximum__maximum__result ) )
end
